// トーナメント 10人の場合と26人の場合 -> アルゴリズム化したい、初戦で2の乗数にする
const match = {
	m8: {
		series: [ 2, 8, 6, 4, 3, 5, 7, 1 ],
		match: [
			[ [ 2, 8, -1 ], [ 6, 4, -2 ], [ 3, 5, -3 ], [ 7, 1, -4 ], ], // ベスト4決定
			[ [ -1, -2, -5 ], [ -3, -4, -6 ], ], // 準決勝
			[ [ -5, -6, -7 ] ] // 決勝
		]
	},
	m4: {
		series: [ 2, 4, 3, 1 ],
		match: [
			[ [ 2, 4, -1 ], [ 3, 1, -2 ], ], // 準決勝
			[ [ -1, -2, -3 ] ] // 決勝
		]
	},
	m2: {
		series: [ 2, 1 ],
		match: [
			[ [ 1, 2, -1 ] ] // 決勝
		]
	},
	m0: {
		series: [],
		match: [],
	},
	m10: {
		series: [ 1, 9, 8, 5, 4, 3, 6, 7, 10, 2 ],
		match: [
			[ [ 9, 8, -1 ], [ 7, 10, -2 ], ], // ベスト8決定
			[ [ 1, -1, -3 ], [ 5, 4, -4 ], [ 3, 6, -5 ], [ -2, 2, -6 ], ], // ベスト4決定
			[ [ -3, -4, -7 ], [ -5, -6, -8 ], ], // 準決勝
			[ [ -7, -8, -9 ] ] // 決勝
		]
	},
	m26: {
		series: [
			1, 17, 16, 12, 21, 6, 7, 26, 24, 9, 11, 22, 4, 
			2, 18, 15, 13, 20, 5, 8, 25, 23, 10, 14, 19, 3
		],
		match: [
			[ [ 17, 16, -1 ], [ 12, 21, -2 ], [ 7, 26, -3 ], [ 24, 9, -4 ], [ 11, 22, -5 ], [ 18, 15, -6 ], [ 13, 20, -7 ], [ 8, 25, -8 ], [ 23, 10, -9 ], [ 14, 19, -10 ], ], // ベスト16決定
			[ [ 1, -1, -11 ], [ -2, 6, -12 ], [ -3, -4, -13 ], [ -5, 4, -14 ], [ 2, -6, -15 ], [ -7, 5, -16], [ -8, -9, -17 ], [ -10, 3, -18 ], ], // ベスト8決定
			[ [ -11, -12, -19 ], [ -13, -14, -20 ], [ -15, -16, -21 ], [ -17, -18, -22 ], ], // ベスト4決定
			[ [ -19, -20, -23 ], [ -21, -22, -24 ], ], // 準決勝
			[ [ -23, -24, -25 ] ] // 決勝
		]
	}
}

const getMatch = (n) => {
	const r = match["m" + n];
	if (r) {
		return r;
	}
	throw new Error("unsupported " + n + " match");
};
